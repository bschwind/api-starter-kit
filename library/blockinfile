#!/usr/bin/python
# -*- coding: utf-8 -*-

# Ansible blockinfile module
#
# Licensed under GPL version 3 or later
# (c) 2014, 2015 YAEGASHI Takeshi <yaegashi@debian.org>
# (c) 2013 Evan Kaufman <evan@digitalflophouse.com>

import re
import os
import tempfile

DOCUMENTATION = """
---
module: blockinfile
author: YAEGASHI Takeshi
short_description: Insert/update/remove a text block
                   surrounded by marker lines.
version_added: 0.0
description:
  - 'This module will insert/update/remove a block of multi-line text
    surrounded by customizable marker lines
    (default: "# {BEGIN/END} ANSIBLE MANAGED BLOCK").
    Some functionality is taken from M(replace) module by Evan Kaufman.'
options:
  dest:
    required: true
    aliases: [ name, destfile ]
    description:
      - The file to modify.
  marker:
    required: false
    default: "# {mark} ANSIBLE MANAGED BLOCK"
    description:
      - The marker line template.
        "{mark}" will be replaced with "BEGIN" or "END".
  content:
    required: false
    default: ""
    description:
      - The text to insert inside the marker lines.
        If it's empty string, marker lines will also be removed.
  insertafter:
    required: false
    default: EOF
    description:
      - If specified, the block will be inserted after the last match of
        specified regular expression. A special value is available; C(EOF) for
        inserting the block at the end of the file.  If specified regular
        expresion has no matches, EOF will be used instead.
    choices: [ 'EOF', '*regex*' ]
  insertbefore:
    required: false
    description:
      - If specified, the block will be inserted before the last match of
        specified regular expression. A special value is available; C(BOF) for
        inserting the block at the beginning of the file.  If specified regular
        expresion has no matches, the block will be inserted at the end of the
        file.
    choices: [ 'BOF', '*regex*' ]
  create:
    required: false
    default: "no"
    choices: [ "yes", "no" ]
    description:
      - Create a new file if it doesn't exist.
  backup:
    required: false
    default: "no"
    choices: [ "yes", "no" ]
    description:
      - Create a backup file including the timestamp information so you can
        get the original file back if you somehow clobbered it incorrectly.
  validate:
    required: false
    description:
      - validation to run before copying into place
    required: false
    default: None
extends_documentation_fragment: files
"""

EXAMPLES = r"""
- blockinfile: dest=/etc/ssh/sshd_config content="Match User ansible-agent\nPasswordAuthentication no"
- blockinfile:
    dest: /etc/network/interfaces
    backup: yes
    content: |
      iface eth0 inet static
          address 192.168.0.1
          netmask 255.255.255.0
- blockinfile: |
    dest=/var/www/html/index.html backup=yes
    marker="<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    content="<h1>Welcome to {{ansible_hostname}}</h1>"
    insertafter="<body>"
"""

def write_changes(module,contents,dest):

    tmpfd, tmpfile = tempfile.mkstemp()
    f = os.fdopen(tmpfd,'wb')
    f.write(contents)
    f.close()

    validate = module.params.get('validate', None)
    valid = not validate
    if validate:
        if "%s" not in validate:
            module.fail_json(msg="validate must contain %%s: %s" % (validate))
        (rc, out, err) = module.run_command(validate % tmpfile)
        valid = rc == 0
        if rc != 0:
            module.fail_json(msg='failed to validate: '
                                 'rc:%s error:%s' % (rc,err))
    if valid:
        module.atomic_move(tmpfile, dest)

def check_file_attrs(module, changed, message):

    file_args = module.load_file_common_arguments(module.params)
    if module.set_file_attributes_if_different(file_args, False):

        if changed:
            message += " and "
        changed = True
        message += "ownership, perms or SE linux context changed"

    return message, changed

def main():
    module = AnsibleModule(
        argument_spec=dict(
            dest=dict(required=True, aliases=['name', 'destfile']),
            marker=dict(default='# {mark} ANSIBLE MANAGED BLOCK', type='str'),
            content=dict(default='', type='str'),
            insertafter=dict(default=None),
            insertbefore=dict(default=None),
            create=dict(default='no', choices=BOOLEANS, type='bool'),
            backup=dict(default='no', choices=BOOLEANS, type='bool'),
            validate=dict(default=None, type='str'),
        ),
        mutually_exclusive=[['insertbefore', 'insertafter']],
        add_file_common_args=True,
        supports_check_mode=True
    )

    params = module.params
    dest = os.path.expanduser(params['dest'])
    if module.boolean(params.get('follow', None)):
        dest = os.path.realpath(dest)

    if os.path.isdir(dest):
        module.fail_json(rc=256, msg='Destination %s is a directory !' % dest)

    if not os.path.exists(dest):
        if not module.boolean(params['create']):
            module.fail_json(rc=257, msg='Destination %s does not exist !' % dest)
        original = None
        lines = []
    else:
        f = open(dest, 'rb')
        original = f.read()
        f.close()
        lines = original.splitlines()

    insertbefore = params['insertbefore']
    insertafter = params['insertafter']
    content = params['content']
    marker = params['marker']

    if insertbefore is None and insertafter is None:
        insertafter = 'EOF'

    if insertafter not in (None, 'EOF'):
        insertre = re.compile(insertafter)
    elif insertbefore not in (None, 'BOF'):
        insertre = re.compile(insertbefore)
    else:
        insertre = None

    marker0 = re.sub(r'{mark}', 'BEGIN', marker, 0)
    marker1 = re.sub(r'{mark}', 'END', marker, 0)
    if content in (None, ''):
        contentlines = []
    else:
        content = re.sub('', content, '', 0)
        contentlines = [marker0] + content.splitlines() + [marker1]

    n0 = n1 = None
    for i, line in enumerate(lines):
        if line.startswith(marker0): n0 = i
        if line.startswith(marker1): n1 = i

    if None in (n0, n1):
        n0 = None
        if insertre is not None:
            for i, line in enumerate(lines):
                if insertre.search(line): n0 = i
            if n0 is None:
                n0 = len(lines)
            elif insertafter is not None:
                n0 += 1
        elif insertbefore is not None:
            n0 = 0          # insertbefore=BOF
        else:
            n0 = len(lines) # insertafter=EOF
    elif n0 < n1:
        lines[n0:n1+1] = []
    else:
        lines[n1:n0+1] = []
        n0 = n1

    lines[n0:n0] = contentlines

    result = '\n'.join(lines)+'\n' if lines else ''
    if original == result:
        msg = ''
        changed = False
    elif original is None:
        msg = 'File created'
        changed = True
    elif not contentlines:
        msg = 'Block removed'
        changed = True
    else:
        msg = 'Block inserted'
        changed = True

    if changed and not module.check_mode:
        if module.boolean(params['backup']) and os.path.exists(dest):
            module.backup_local(dest)
        write_changes(module, result, dest)

    msg, changed = check_file_attrs(module, changed, msg)
    module.exit_json(changed=changed, msg=msg)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
